1. Simplify the big O expression as much as possible - O(n + 10) 
Answer: O(n)

2. Simplify the big O expression as much as possible - O(100 * n) 
Answer: O(n)

3. Simplfy the following big O expression as much as possible - O(25) 
Answer: o(1)

4. Simplify the following big O expression as much as possible -  O(n^2 + n^3) 
Answer: O(n^3)

5. Simplify the following big O expression as much as possible - O(n + n + n + n) 
Answer: O(n)

6. Determine the time complexity for the following function 
    <code>
        function logUpTo(n) {
            for (var i = 1; i <= n; i++) {
                console.log(i);
            }
        }
    </code>
Answer: O(n)

7. Determine the time complexity for the following function 
    <code>
        function logAtMost10(n) {
            for (var i = 1; i <= Math.min(n, 10); i++) {
                console.log(i);
            }
        }
    </code>
Answer: O(1)

8. Determine the time complexity for the following function
    <code>
        function logAtLeast10(n) {
            for (var i = 1; i <= Math.max(n, 10); i++) {
                console.log(i);
            }
        }
    </code>

Answer: O(n)

9. Determine the time complexity for the following function
    <code>
        function onlyElementsAtEvenIndex(array) {
            var newArray = Array(Math.ceil(array.length / 2));
            for (var i = 0; i < array.length; i++) {
                if (i % 2 === 0) {
                    newArray[i / 2] = array[i];
                }
            }
            return newArray;
        }
    </code>

Answer: O(n)

10. Determine the time complexity for the following function
    <code>
        function subtotals(array) {
            var subtotalArray = Array(array.length);
            for (var i = 0; i < array.length; i++) {
                var subtotal = 0;
                for (var j = 0; j <= i; j++) {
                    subtotal += array[j];
                }
                subtotalArray[i] = subtotal;
            }
            return subtotalArray;
        }
    </code>

Answer: O(n^2)

11. Determine the space complexity for the following function  

    function logUpTo(n) {
        for (var i = 1; i <= n; i++) {
            console.log(i);
        }
    }

Answer: O(1)

12.  Determine the space complexity for the following function  

    function logAtMost10(n) {
        for (var i = 1; i <= Math.min(n, 10); i++) {
            console.log(i);
        }
    }

Answer: O(1)

13. Determine the space complexity for the following function  

    function logAtMost10(n) {
        for (var i = 1; i <= Math.min(n, 10); i++) {
            console.log(i);
        }
    }

Answer: O(1)

14. Determine the  space complexity for the following function 

    function onlyElementsAtEvenIndex(array) {
        var newArray = Array(Math.ceil(array.length / 2));
        for (var i = 0; i < array.length; i++) {
            if (i % 2 === 0) {
                newArray[i / 2] = array[i];
            }
        }
        return newArray;
    }

Answer: O(n)

15. Determine the space complexity for the following function

    function subtotals(array) {
        var subtotalArray = Array(array.length);
        for (var i = 0; i < array.length; i++) {
            var subtotal = 0;
            for (var j = 0; j <= i; j++) {
                subtotal += array[j];
            }
            subtotalArray[i] = subtotal;
        }
        return subtotalArray;
    }

Answer: O(n)